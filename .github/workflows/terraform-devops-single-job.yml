name: 'Create Infra with Terraform'

on:
  push:
    branches:
    - main
  pull_request:
    branches: 
    - main

env:
  WORKING_DIRECTORY: 05_Web_Sql_database
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Login to Azure
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

#    - name: Create Azure Resource Group
#      uses: Azure/cli@v1.0.6
#      with:
#        # Azure CLI version to be used to execute the script. If not provided, latest version is used
#        # azcliversion: 2.34.1 # optional, default is agentazcliversion
#        # Specify the script here
#        inlineScript: |
#          az version
#          az group create -n $RESOURCE_GROUP -l westeurope
    
    - name: Create Terraform backend state storage
      run: |
        STORAGE_ACCOUNT_NAME=storagetfstate011
        RESOURCE_GROUP_NAME=rg-terraform-state
        CONTAINER_NAME=tfstate
        BLOB_NAME=terraform.tfstate
        
        # Create resource group
        az group create --name $RESOURCE_GROUP_NAME --location westeurope
        
        # Create storage account
        az storage account create --name $STORAGE_ACCOUNT_NAME \
           --resource-group $RESOURCE_GROUP_NAME \
           --sku Standard_LRS \
           --encryption-services blob
        
        # Create blob container
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
        
        # generate backend.tf file
        cat <<EOT > backend.tf
        terraform {
          backend "azurerm" {
            resource_group_name   = "$RESOURCE_GROUP_NAME"
            storage_account_name  = "$STORAGE_ACCOUNT_NAME"
            container_name        = "$CONTAINER_NAME"
            key                   = "$BLOB_NAME"
          }
        }
        EOT
        
        cat backend.tf

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Configuring the Service Principal in Terraform
      run: |
        echo ${{ secrets.AZURE_CREDENTIALS }} | jq .clientId
        
        export ARM_CLIENT_ID=${{ secrets.AZURE_CREDENTIALS }} | jq .clientId
        export ARM_CLIENT_SECRET="00000000-0000-0000-0000-000000000000"
        export ARM_SUBSCRIPTION_ID="00000000-0000-0000-0000-000000000000"
        export ARM_TENANT_ID="00000000-0000-0000-0000-000000000000"
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
