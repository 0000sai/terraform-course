name: 'Create Infra with Terraform'

on:
  push:
    branches:
    - main
  pull_request:
    branches: 
    - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      WORKING_DIRECTORY: 05_Web_Sql_database

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: create Terraform backend state storage
      working-directory: $WORKING_DIRECTORY
      run: |
        STORAGE_ACCOUNT_NAME=storagetfstate011
        RESOURCE_GROUP_NAME=rg-terraform-state
        CONTAINER_NAME=tfstate
        BLOB_NAME=terraform.tfstate
        
        # Create resource group
        az group create --name $RESOURCE_GROUP_NAME --location westeurope
        
        # Create storage account
        az storage account create --name $STORAGE_ACCOUNT_NAME \
           --resource-group $RESOURCE_GROUP_NAME \
           --sku Standard_LRS \
           --encryption-services blob
        
        # Create blob container
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
        
        # generate backend.tf file
        cat <<EOT > backend.tf
        terraform {
          backend "azurerm" {
            resource_group_name   = "$RESOURCE_GROUP_NAME"
            storage_account_name  = "$STORAGE_ACCOUNT_NAME"
            container_name        = "$CONTAINER_NAME"
            key                   = "$BLOB_NAME"
          }
        }
        EOT
        
        cat backend.tf

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: $WORKING_DIRECTORY

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: $WORKING_DIRECTORY

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: $WORKING_DIRECTORY

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: $WORKING_DIRECTORY
